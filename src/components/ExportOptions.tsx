import React, { useState } from 'react';
import { Download, Image, FileText, Share2, Copy, Check } from 'lucide-react';
import { CompoundAnalysis } from '../utils/constants';

interface ExportOptionsProps {
  analysis: CompoundAnalysis;
  moleculeViewerRef?: React.RefObject<HTMLDivElement>;
}

const ExportOptions: React.FC<ExportOptionsProps> = ({ analysis, moleculeViewerRef }) => {
  const [copied, setCopied] = useState(false);
  const [isExporting, setIsExporting] = useState(false);

  const downloadStructureImage = () => {
    if (moleculeViewerRef?.current) {
      const canvas = moleculeViewerRef.current.querySelector('canvas');
      if (canvas) {
        const link = document.createElement('a');
        link.download = `${analysis.name.replace(/\s+/g, '_')}_structure.png`;
        link.href = canvas.toDataURL('image/png');
        link.click();
      }
    }
  };

  const generatePDFReport = async () => {
    setIsExporting(true);
    
    // Create a comprehensive text report
    const report = `
AI COMPOUND ANALYZER REPORT
Generated: ${new Date().toLocaleString()}

COMPOUND INFORMATION
Name: ${analysis.name}
SMILES: ${analysis.smiles}
Molecular Formula: ${analysis.formula}

MOLECULAR PROPERTIES
Molecular Weight: ${analysis.properties.molecularWeight.toFixed(2)} g/mol
LogP (Lipophilicity): ${analysis.properties.logP.toFixed(2)}
H-Bond Donors: ${analysis.properties.hbondDonors}
H-Bond Acceptors: ${analysis.properties.hbondAcceptors}
Rotatable Bonds: ${analysis.properties.rotatablebonds}
Polar Surface Area: ${analysis.properties.polarSurfaceArea.toFixed(2)} Å²
Heavy Atom Count: ${analysis.properties.heavyAtomCount}
Ring Count: ${analysis.properties.ringCount}
Aromatic Rings: ${analysis.properties.aromaticRings}
Hetero Atoms: ${analysis.properties.heteroAtoms}

DRUG-LIKENESS ASSESSMENT
Lipinski Rule of 5 Violations: ${analysis.drugLikeness.lipinskiViolations}
Veber Rule Violations: ${analysis.drugLikeness.veberViolations}
Lead-like Properties: ${analysis.drugLikeness.leadLikeness ? 'Yes' : 'No'}
Drug-like Properties: ${analysis.drugLikeness.drugLikeness ? 'Yes' : 'No'}

ADMET PREDICTIONS
Blood-Brain Barrier: ${analysis.admet.bloodBrainBarrier}
Human Intestinal Absorption: ${analysis.admet.humanIntestinalAbsorption}
CYP450 Inhibition: ${analysis.admet.cyp450Inhibition.join(', ') || 'None predicted'}
Toxicity Assessment: ${analysis.admet.toxicity}

ANALYSIS NOTES
- This analysis was generated using AI-powered molecular analysis
- Predictions are based on computational models and should be validated experimentally
- ADMET predictions are estimates and may not reflect actual biological behavior
- Consult with medicinal chemists for drug development decisions

Generated by AI Compound Analyzer
Powered by RDKit & 3DMol.js
    `.trim();

    // Create and download the report
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${analysis.name.replace(/\s+/g, '_')}_analysis_report.txt`;
    link.click();
    URL.revokeObjectURL(url);
    
    setIsExporting(false);
  };

  const copyAnalysisLink = async () => {
    // Create a shareable summary
    const summary = `${analysis.name} Analysis:
SMILES: ${analysis.smiles}
MW: ${analysis.properties.molecularWeight.toFixed(1)} g/mol
LogP: ${analysis.properties.logP.toFixed(1)}
Drug-like: ${analysis.drugLikeness.drugLikeness ? 'Yes' : 'No'}
Generated by AI Compound Analyzer`;

    try {
      await navigator.clipboard.writeText(summary);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const shareToSocial = (platform: string) => {
    const text = `Check out this molecular analysis of ${analysis.name}! MW: ${analysis.properties.molecularWeight.toFixed(1)} g/mol, LogP: ${analysis.properties.logP.toFixed(1)}`;
    const url = window.location.href;
    
    let shareUrl = '';
    switch (platform) {
      case 'twitter':
        shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
        break;
      case 'linkedin':
        shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`;
        break;
      case 'reddit':
        shareUrl = `https://reddit.com/submit?title=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
        break;
    }
    
    if (shareUrl) {
      window.open(shareUrl, '_blank', 'width=600,height=400');
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
      <div className="flex items-center gap-2 mb-4">
        <Download className="w-5 h-5 text-green-500" />
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
          Export & Share
        </h3>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
        {/* Download Structure Image */}
        <button
          onClick={downloadStructureImage}
          className="flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/30 
                   hover:bg-blue-100 dark:hover:bg-blue-900/50 rounded-lg
                   text-blue-700 dark:text-blue-300 transition-colors"
        >
          <Image className="w-4 h-4" />
          <span className="text-sm font-medium">3D Image</span>
        </button>

        {/* Download PDF Report */}
        <button
          onClick={generatePDFReport}
          disabled={isExporting}
          className="flex items-center gap-2 p-3 bg-red-50 dark:bg-red-900/30 
                   hover:bg-red-100 dark:hover:bg-red-900/50 rounded-lg
                   text-red-700 dark:text-red-300 transition-colors
                   disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <FileText className="w-4 h-4" />
          <span className="text-sm font-medium">
            {isExporting ? 'Generating...' : 'Full Report'}
          </span>
        </button>

        {/* Copy Analysis Summary */}
        <button
          onClick={copyAnalysisLink}
          className="flex items-center gap-2 p-3 bg-green-50 dark:bg-green-900/30 
                   hover:bg-green-100 dark:hover:bg-green-900/50 rounded-lg
                   text-green-700 dark:text-green-300 transition-colors"
        >
          {copied ? (
            <>
              <Check className="w-4 h-4" />
              <span className="text-sm font-medium">Copied!</span>
            </>
          ) : (
            <>
              <Copy className="w-4 h-4" />
              <span className="text-sm font-medium">Copy Summary</span>
            </>
          )}
        </button>

        {/* Share Options */}
        <div className="relative group">
          <button className="flex items-center gap-2 p-3 bg-purple-50 dark:bg-purple-900/30 
                           hover:bg-purple-100 dark:hover:bg-purple-900/50 rounded-lg
                           text-purple-700 dark:text-purple-300 transition-colors w-full">
            <Share2 className="w-4 h-4" />
            <span className="text-sm font-medium">Share</span>
          </button>
          
          <div className="absolute top-full left-0 mt-1 w-48 bg-white dark:bg-gray-700 
                         rounded-lg shadow-lg border border-gray-200 dark:border-gray-600
                         opacity-0 invisible group-hover:opacity-100 group-hover:visible
                         transition-all duration-200 z-10">
            <button
              onClick={() => shareToSocial('twitter')}
              className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300
                       hover:bg-gray-100 dark:hover:bg-gray-600 rounded-t-lg"
            >
              Share on Twitter
            </button>
            <button
              onClick={() => shareToSocial('linkedin')}
              className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300
                       hover:bg-gray-100 dark:hover:bg-gray-600"
            >
              Share on LinkedIn
            </button>
            <button
              onClick={() => shareToSocial('reddit')}
              className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300
                       hover:bg-gray-100 dark:hover:bg-gray-600 rounded-b-lg"
            >
              Share on Reddit
            </button>
          </div>
        </div>
      </div>

      <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
        <p className="text-xs text-gray-600 dark:text-gray-400">
          <strong>Note:</strong> Exported reports include all molecular properties, drug-likeness assessments, 
          and ADMET predictions. 3D structure images are captured at current viewing angle.
        </p>
      </div>
    </div>
  );
};

export default ExportOptions;